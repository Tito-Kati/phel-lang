(ns phel\core)

(defmacro ->
  "Threads the expr through the forms. Inserts `x` as the second item
  in the first from, making a list of it if it is not a list already.
  If there are more froms, inserts the first form as the second item in
  the second form, etc."
  [x & forms]
  (loop [x x
         forms (if (empty? forms) nil forms)]
    (if forms
      (let [form (first forms)
            threaded (if (list? form)
                       `(,(first form) ,x ,@(next form))
                       (list form x))]
        (recur threaded (next forms)))
      x)))

(defmacro ->>
  "Threads the expr through the forms. Inserts `x` as the
  last item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  last item in second form, etc."
  [x & forms]
  (loop [x x
         forms (if (empty? forms) nil forms)]
    (if forms
      (let [form (first forms)
            threaded (if (list? form)
                       `(,(first form) ,@(next form) ,x)
                       (list form x))]
        (recur threaded (next forms)))
      x)))

(defmacro as->
  "Binds `name` to `expr`, evaluates the first form in the lexical context
  of that binding, then binds name to that result, repeating for each
  successive form, returning the result of the last form."
  [expr name & forms]
  (let [x (gensym)]
    `(let [,name ,expr
           ,@(interleave (repeat (count forms) name) forms)]
       ,name)))
