(ns phel\core)

(defn range
  "Create an array of values [start, end). If the function has one argument the
  the range [0, end) is returned. With two arguments, returns [start, end).
  The third argument is an optional step width (default 1)."
  [a & rest]
  (case (count rest)
    0 (range 0 a 1)
    1 (range a (get rest 0) 1)
    2 (let [res (transient [])
            begin a
            end (get rest 0)
            step (get rest 1)
            cmp (if (< step 0) > <)]
        (loop [i begin]
          (if (cmp i end)
            (do
              (push res i)
              (recur (php/+ i step)))
            (persistent res))))
    (throw (php/new InvalidArgumentException "Range function expects one, two or three arguments"))))

(defn- for-builder [body head i]
  (if (<= (count head) i)
    # No more heads, return the body
    body

    # Handle heads
    (let [@[i binding (php/+ i 1) verb] head]
      (if (keyword? binding)
        # Case 1: Modifiers
        (let [rest (for-builder body head (php/+ i 2))]
          (case binding
            :while  `(if ,verb ,rest php/break)
            :let    `(let ,verb ,rest)
            :when   `(when ,verb ,rest)
            (throw (php/new InvalidArgumentException (str "This modifier is not supported in for loop: " verb)))))

        # Case 2: Verbs
        (let [@[(php/+ i 2) object] head
              rest (for-builder body head (php/+ i 3))
              value-sym (gensym)]
          (case verb
            :range  `(foreach [,binding (apply range ,object)] ,rest)
            :in     `(foreach [,value-sym ,object] (let [,binding ,value-sym] ,rest))
            :keys   (let [key-sym (gensym)]
                      `(foreach [,key-sym ,value-sym ,object] (let [,binding ,key-sym] ,rest)))
            :pairs  (let [key-sym (gensym)]
                      `(foreach [,key-sym ,value-sym ,object]
                         (let [,binding [,key-sym ,value-sym]] ,rest)))
            (throw (php/new InvalidArgumentException (str "This verb is not supported in for loop " verb)))))))))

(defmacro for
  "List comprehension. The head of the loop is a vector that contains a
  sequence of bindings and modifiers. A binding is a sequence of three
  values `binding :verb expr`. Where `binding` is a binding as
  in let and `:verb` is one of the following keywords:

  * :range loop over a range by using the range function.
  * :in loops over all values of a collection.
  * :keys loops over all keys/indexes of a collection.
  * :pairs loops over all key value pairs of a collection.

  After each loop binding additional modifiers can be applied. Modifiers
  have the form `:modifier argument`. The following modifiers are supported:

  * :while breaks the loop if the expression is falsy.
  * :let defines additional bindings.
  * :when only evaluates the loop body if the condition is true.

  The for loops returns a array with all evaluated elements of the body."
  [head & body]
  (let [res-sym (gensym "res__")
        loop-body (for-builder `(push ,res-sym (do ,@body)) head 0)]
    `(let [,res-sym (transient [])]
       ,loop-body
       (persistent ,res-sym))))

(defmacro dofor
  "Repeatedly executes body for side effects with bindings and modifiers as
  provided by for. Returns nil."
  [head & body]
  (for-builder `(do ,@body) head 0))
