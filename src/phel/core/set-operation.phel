(ns phel\core)

(defn union
  "Union multiple sets into a new one."
  [& sets]
  (let [target (transient (set))]
    (foreach [s sets]
      (foreach [v s]
        (php/-> target (add v))))
    (persistent target)))

(defn- intersection-pair
  [s1 s2]
  (if (< (count s2) (count s1))
    (recur s2 s1)
    (let [result (transient s1)]
      (foreach [item s1]
        (when-not (php/-> s2 (contains item))
          (php/-> result (remove item))))
      (persistent result))))

(defn intersection
  "Intersect multiple sets into a new one."
  [set & sets]
  (reduce intersection-pair set sets))

(defn difference-pair
  [s1 s2]
  (if (< (count s1) (count s2))
    (let [result (transient s1)]
      (foreach [item s1]
        (when (php/-> s2 (contains item))
          (php/-> result (remove item))))
      (persistent result))

    (let [result (transient s1)]
      (foreach [item s2]
        (php/-> result (remove item)))
      (persistent result))))

(defn difference
  "Difference between multiple sets into a new one."
  [set & sets]
  (reduce difference-pair set sets))

(defn symmetric-difference
  "Symmetric difference between multiple sets into a new one."
  [set & sets]
  (reduce |(union (difference $1 $2) (difference $2 $1)) set sets))
