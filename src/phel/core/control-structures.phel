(ns phel\core)

(defmacro if-not
  "Shorthand for `(if (not condition) else then)`."
  [test then & [else]]
  `(if ,test ,else ,then))

(defmacro when
  "Evaluates `test` and if that is logical true, evaluates `body`."
  [test & body]
  `(if ,test (do ,@body)))

(defmacro when-not
  "Evaluates `test` and if that is logical false, evaluates `body`."
  [test & body]
  `(if ,test nil (do ,@body)))

(defmacro cond
  "Takes a set of test/expression pairs. Evaluates each test one at a time.
  If a test returns logically true, the expression is evaluated and return.
  If no test matches a final last expression can be provided that is than
  evaluated and return. Otherwise, nil is returned."
  [& pairs]
  (let [cnt (count pairs)]
    (if (php/=== cnt 0)
      nil
      (if (php/=== cnt 1)
        (first pairs)
        (list 'if
              (first pairs)
              (second pairs)
              (cons 'cond (apply list (next (next pairs)))))))))

(defmacro case
  "Takes an expression `e` and a set of test-content/expression pairs. First
  evaluates `e` and the then finds the first pair where the test-constant matches
  the result of `e`. The associated expression is then evaluated and returned.
  If no matches can be found a final last expression can be provided that is
  than evaluated and return. Otherwise, nil is returned."
  [e & pairs]
  (if (next pairs)
    (let [v (gensym)]
      `(let [,v ,e]
         (if (equals1 ,v ',(first pairs))
           ,(first (next pairs))
           (case ,v ,@(next (next pairs))))))
    (first pairs)))
