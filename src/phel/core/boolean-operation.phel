(ns phel\core)

(defmacro or
  "Evaluates each expression one at a time, from left to right. If a form
returns a logical true value, or returns that value and doesn't evaluate any of
the other expressions, otherwise it returns the value of the last expression.
Calling or without arguments, returns nil."
  [& args]
  (case (count args)
    0 nil
    1 (first args)
    (let [v (gensym)]
      `(let [,v ,(first args)]
         (if ,v ,v (or ,@(next args)))))))

(defmacro and
  "Evaluates each expression one at a time, from left to right. If a form
returns logical false, and returns that value and doesn't evaluate any of the
other expressions, otherwise it returns the value of the last expression.
Calling the and function without arguments returns true."
  [& args]
  (case (count args)
    0 'true
    1 (first args)
    (let [v (gensym)]
      `(let [,v ,(first args)]
         (if ,v (and ,@(next args)) ,v)))))

(defn- id2 [a b]
  (if (php/instanceof a IdenticalInterface)
    (php/-> a (identical b))
    (php/=== a b)))

(defn id
  "Checks if all values are identically. Same as `a === b` in PHP."
  [a & more]
  (case (count more)
    0 true
    1 (id2 a (first more))
    (if (id2 a (first more))
      (recur (first more) (next more))
      false)))

(defn =
  "Checks if all values are equal. Same as `a == b` in PHP."
  [a & more]
  (case (count more)
    0 true
    1 (equals1 a (first more))
    (if (equals1 a (first more))
      (recur (first more) (next more))
      false)))

(defn not
  "The `not` function returns `true` if the given value is logical false and
`false` otherwise."
  [x]
  (if x false true))

(defn not=
  "Checks if all values are unequal. Same as `a != b` in PHP."
  [a & more]
  (case (count more)
    0 false
    1 (not (= a (first more)))
    (not (apply = a more))))

(defn <
  "Checks if each argument is strictly less than the following argument. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/< a (first more))
    (if (php/< a (first more))
      (recur (first more) (next more))
      false)))

(defn <=
  "Checks if each argument is less than or equal to the following argument. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/<= a (first more))
    (if (php/<= a (first more))
      (recur (first more) (next more))
      false)))

(defn >
  "Checks if each argument is strictly greater than the following argument. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/> a (first more))
    (if (php/> a (first more))
      (recur (first more) (next more))
      false)))

(defn >=
  "Checks if each argument is greater than or equal to the following argument. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/>= a (first more))
    (if (php/>= a (first more))
      (recur (first more) (next more))
      false)))

(defn all?
  "Returns true if `(pred x)` is logical true for every `x` in `xs`, else false."
  [pred xs]
  (cond
    (php/=== (count xs) 0) true
    (pred (first xs))     (recur pred (next xs))
    false))

(defn some?
  "Returns true if `(pred x)` is logical true for at least one `x` in `xs`, else false."
  [pred xs]
  (if xs
    (or (pred (first xs)) (recur pred (next xs)))
    false))

(defn true?
  "Checks if `x` is true. Same as `x === true` in PHP."
  [x]
  (id x true))

(defn truthy?
  "Checks if `x` is truthy. Same as `x == true` in PHP."
  [x]
  (php/:: Truthy (isTruthy x)))

(defn false?
  "Checks if `x` is false. Same as `x === false` in PHP."
  [x]
  (id x false))

(defn nil?
  "Returns true if `x` is nil, false otherwise."
  [x]
  (id x nil))

(defn str-contains?
  "True if str contains s."
  [str s]
  (not (false? (php/strpos str s))))

(defn contains?
  "Returns true if key is present in the given collection, otherwise returns false."
  [coll key]
  (cond
    (php/instanceof coll ContainsInterface) (php/-> coll (contains key))
    (php/is_array coll) (php/array_key_exists key coll)
    (throw (php/new InvalidArgumentException (php/. "cannot call 'contains?' on " (php/get_class coll))))))

(defn compare
  "An integer less than, equal to, or greater than zero when `x` is less than,
  equal to, or greater than `y`, respectively."
  [x y]
  (php/<=> x y))
