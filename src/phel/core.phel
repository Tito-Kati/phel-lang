(ns phel\core
  (:use Phel\Lang\AbstractType)
  (:use Phel\Lang\Collections\Struct\AbstractPersistentStruct)
  (:use Phel\Lang\Keyword)
  (:use Phel\Lang\PhelArray)
  (:use Phel\Lang\Table)
  (:use Phel\Lang\Set)
  (:use Phel\Lang\SliceInterface)
  (:use Phel\Lang\CdrInterface)
  (:use Phel\Lang\ConcatInterface)
  (:use Phel\Lang\FirstInterface)
  (:use Phel\Lang\IdenticalInterface)
  (:use Phel\Lang\ConsInterface)
  (:use Phel\Lang\MetaInterface)
  (:use Phel\Lang\Nil)
  (:use Phel\Lang\PopInterface)
  (:use Phel\Lang\PushInterface)
  (:use Phel\Lang\RestInterface)
  (:use Phel\Lang\RemoveInterface)
  (:use Phel\Lang\Symbol)
  (:use Phel\Lang\Truthy)
  (:use Phel\Lang\TypeFactory)
  (:use Phel\Lang\Collections\LinkedList\PersistentListInterface)
  (:use Phel\Lang\Collections\Vector\PersistentVectorInterface)
  (:use Phel\Lang\Collections\Vector\TransientVectorInterface)
  (:use Phel\Lang\Collections\Map\PersistentMapInterface)
  (:use Phel\Lang\Collections\Map\TransientMapInterface)
  (:use Phel\Lang\Collections\HashSet\PersistentHashSetInterface)
  (:use Phel\Lang\Collections\HashSet\TransientHashSetInterface)
  (:use Phel\Compiler\Emitter\OutputEmitter\Munge)
  (:use Phel\Printer\Printer)
  (:use Phel\Runtime\RuntimeSingleton)
  (:use Countable)
  (:use Exception)
  (:use InvalidArgumentException))

(def *ns*
  "Returns the namespace in the current scope."
  "\\phel\\core")

(def argv
  "Array of arguments passed to script."
  (php/aget php/$GLOBALS "argv"))

# --------------------------------------------
# Basic methods for quasiquote and destructure
# --------------------------------------------

(def list
  "```phel\n(list & xs)\n```\nCreates a new list. If no argument is provided, an empty list is created."
  (fn [& xs] (php/-> (php/:: TypeFactory (getInstance)) (persistentListFromArray (php/-> xs (toPhpArray))))))

(def vector
  "```phel\n(vetcor & xs)\n```\nCreates a new vector. If no argument is provided, an empty list is created."
  (fn [& xs] (php/-> (php/:: TypeFactory (getInstance)) (persistentVectorFromArray (php/-> xs (toPhpArray))))))

(def hash-map
  "```phel\n(hash-map & xs)\n```\nCreates a new hash map. If no argument is provided, an empty hash map is created. The number of parameters must be even."
  (fn [& xs] (php/-> (php/:: TypeFactory (getInstance)) (persistentMapFromArray (php/-> xs (toPhpArray))))))

(def array
  "```phel\n(array & xs)\n```\nCreates a new Array. If no argument is provided, an empty Array is created."
  (fn [& xs] xs))

(def table
  "```phel\n(table & xs)\n```\nCreates a new Table. If no argument is provided, an empty Table is created.
The number of parameters must be even."
  (fn [& xs] (php/:: Table (fromKVArray (php/-> xs (toPhpArray))))))

(def next
  "```phel\n(next xs)\n```\nReturns the sequence of elements after the first element. If there are no
elements, returns nil."
  (fn [xs]
    (if (php/=== xs nil)
      nil
      (if (php/instanceof xs CdrInterface)
        (php/-> xs (cdr))
        (if (php/is_array xs)
          (let [sliced (php/array_slice xs 1)]
            (if (php/empty sliced)
              nil
              sliced))
          (throw (php/new InvalidArgumentException
                          (php/. "cannot call 'next on " (php/gettype xs)))))))))

(def first
  "```phel\n(first xs)\n```\nReturns the first element of an indexed sequence or nil."
  (fn [xs]
    (if (php/instanceof xs FirstInterface)
      (php/-> xs (first))
      (php/aget xs 0))))

(def concat1
  {:private true
   :doc "Concatenates two sequential data structures."}
  (fn [xs ys]
    (if (php/=== nil ys)
      xs
      (if (php/instanceof xs ConcatInterface)
        (php/-> xs (concat ys))
        (do
          (foreach [y ys]
            (php/apush xs y))
          xs)))))

(def concat
  "```phel\n(concat arr & xs)\n```\nConcatenates multiple sequential data structures."
  (fn [arr & others]
    (if (php/=== nil arr)
      '()
      (loop [res arr
             other others]
        (if (php/=== nil other)
          res
          (let [[y & ys] other]
            (recur (concat1 res y) ys)))))))

# quasiquote can be used down here

# ------------
# Meta helpers
# ------------

(def meta
  "```phel\n(meta obj)\n```\nGets the meta of the give object"
  (fn [obj]
    (php/-> obj (getMeta))))

(def set-meta!
  "```phel\n(set-meta! obj)\n```\nSets the meta data to a given object"
  (fn [obj meta]
    (php/-> obj (withMeta meta))))

# ------------
# Basic macros
# ------------

(def defn-builder
  {:macro true
   :private true}
  (fn [name meta & fdecl]
    (let [meta (if (php/is_string (php/aget fdecl 0))
                 (php/-> meta (put :doc (php/aget fdecl 0)))
                 meta)
          fdecl (if (php/is_string (php/aget fdecl 0))
                  (next fdecl)
                  fdecl)
          meta (if (php/instanceof (php/aget fdecl 0) PersistentMapInterface)
                 (php/-> meta (merge (php/aget fdecl 0)))
                 meta)
          fdecl (if (php/instanceof (php/aget fdecl 0) PersistentMapInterface)
                  (next fdecl)
                  fdecl)
          args (php/aget fdecl 0)
          docstring (php/aget meta :doc)
          docstring (php/. "```phel\n(" name " " (php/implode " " (apply php/array args)) ")\n```\n" docstring)
          meta (php/-> meta (put :doc docstring))]
      `(def ,name ,meta (fn ,@fdecl)))))

(def defn
  {:macro true
   :doc "```phel\n(defn name & fdecl)\n```\nDefine a new global function."}
  (fn [name & fdecl] (apply defn-builder name {} fdecl)))

(def def-
  {:macro true
   :doc "```phel\n(def- name value)\n```\nDefine a private value that will not be exported."}
  (fn [name value] `(def ,name {:private true} ,value)))

(def defmacro
  {:macro true
   :doc "```phel\n(defmacro name & fdecl)\n```\nDefine a macro."}
  (fn [name & fdecl] (apply defn-builder name {:macro true} fdecl)))

(defmacro defn-
  "Define a private function that will not be exported."
  [name & fdecl]
  (apply defn-builder name {:private true} fdecl))

(defmacro defmacro-
  "Define a private macro that will not be exported."
  [name & fdecl]
  (apply defn-builder name {:macro true :private true} fdecl))

(defmacro declare
  "Declare a global symbol before it is defined."
  [name]
  `(def ,name nil))

(defmacro defstruct
  "Define a new struct."
  [name keys]
  (let [name-str (php/-> name (getName))
        munge (php/new Munge)
        class-name-str (php/. *ns* "\\" (php/-> munge (encode name-str)))
        is-name (php/:: Symbol (create (php/. name-str "?")))]
    `(do
       (defstruct* ,name ,keys)
       (defn ,name ,(php/. "Creates a new " name " struct") ,keys (php/new ,class-name-str ,@keys))
       (defn ,is-name ,(php/. "Checks if `x` is an instance of the " name " struct") [x] (php/is_a x ,class-name-str)))))

(defmacro comment
  "Ignores the body of the comment."
  [&])

(defn gensym
  "Generates a new unique symbol."
  []
  (php/:: Symbol (gen)))

(defn str
  "Creates a string by concatenating values together. If no arguments are
provided an empty string is returned. Nil and false are represented as empty
string. True is represented as 1. Otherwise it tries to call `__toString`.
This is PHP equivalent to `$args[0] . $args[1] . $args[2] ...`"
  [& args]
  (if (php/== (php/count args) 0)
    ""
    (apply php/. args)))

(defn load
  "Loads a file into the current namespace. It can be used to split large namespaces into multiple files."
  [path]
  (php/-> (php/:: RuntimeSingleton (getInstance)) (loadFileIntoNamespace *ns* path)))

(defn transient
  "Converts a persistent collection to a transient collection"
  [coll]
  (php/-> coll (asTransient)))

(defn persistent
  "Converts a transient collection to a persistent collection"
  [coll]
  (php/-> coll (persistent)))

(load (str __DIR__ "/core/basic-constructors.phel"))
(load (str __DIR__ "/core/basic-sequence-operation.phel"))
(load (str __DIR__ "/core/control-structures.phel"))
(load (str __DIR__ "/core/boolean-operation.phel"))
(load (str __DIR__ "/core/type-operation.phel"))
(load (str __DIR__ "/core/sequence-operation.phel"))
(load (str __DIR__ "/core/for-loop.phel"))
(load (str __DIR__ "/core/sequence-functions.phel"))
(load (str __DIR__ "/core/set-operation.phel"))
(load (str __DIR__ "/core/function-operation.phel"))
(load (str __DIR__ "/core/more-sequence-operation.phel"))
(load (str __DIR__ "/core/bitwise-operation.phel"))
(load (str __DIR__ "/core/math-operation.phel"))
(load (str __DIR__ "/core/print-operation.phel"))
(load (str __DIR__ "/core/threading-macros.phel"))
